{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","message","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","modeText","protoTypes","PropTypes","string","isRequired","search","defaultProps","TextForm","text","setText","useState","wordCount","split","length","Fragment","heading","placeholder","rows","value","onChange","event","target","speakClick","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","xmlns","width","height","fill","viewBox","d","upperClassClick","newText","showAlertMessage","lowerClassClick","inverseClick","newtext","i","removeExtraSpacesClick","join","copyToClipboardClick","document","getElementById","select","navigator","clipboard","writeText","clearTextClick","App","setMode","setModeText","setAlert","setTimeout","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.20f4b20f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n\n  return (\n    props.alert && (\n      <div //when props.alert will be null or false then we will get nothing, when it is not null we will ge the jsx in <div>....</div>\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n        role=\"alert\"\n      >\n        <strong>{capitalize(props.alert.type)}: </strong> {props.alert.message}\n      </div>\n    )\n  );\n}\n\nexport default Alert;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n// import { Link } from \"react-router-dom\";\n\nfunction Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              {/* <Link className=\"nav-link active\" to=\"/about\">\n                About\n              </Link> */}\n            </li>\n          </ul>\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.toggleMode}\n            />\n            <label\n              className=\"form-check-label \"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable {props.modeText} Mode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.protoTypes = {\n  title: PropTypes.string.isRequired,\n  search: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: \"set title here\",\n  search: \"search here\",\n};\n\nexport default Navbar;\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n\n  //   text = \"heko\"; //wrong way to change the state\n  //   setText(\"Hello user\"); //correct way\n\n  const upperClassClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlertMessage(\"Coverted to UpperCase\", \"success\");\n  };\n\n  const lowerClassClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlertMessage(\"Coverted to LowerCase\", \"success\");\n  };\n\n  const clearTextClick = () => {\n    let newText = \" \";\n    setText(newText);\n    props.showAlertMessage(\"Text cleared\", \"info\");\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const speakClick = () => {\n    let msg = new SpeechSynthesisUtterance();\n    msg.text = text;\n    window.speechSynthesis.speak(msg);\n  };\n\n  const inverseClick = () => {\n    let newtext = \"\";\n    for (let i = text.length - 1; i >= 0; i--) {\n      newtext += text[i];\n    }\n    setText(newtext);\n    props.showAlertMessage(\"Text inversed\", \"info\");\n  };\n\n  const copyToClipboardClick = () => {\n    let newText = document.getElementById(\"myBox\");\n    newText.select();\n    navigator.clipboard.writeText(newText.value);\n    props.showAlertMessage(\"Copied to Clipboard\", \"success\");\n  };\n\n  const removeExtraSpacesClick = () => {\n    let newText = text.split(/[ ] + /);\n    setText(newText.join(\" \"));\n    props.showAlertMessage(\"Extra spaces Removed\", \"success\");\n  };\n\n  const wordCount = (text)=>{\n    let regex = /\\s+\\S+/;\n    let numOfWords = text.split(regex);\n    return numOfWords.length;\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"mb-3 my-5 row\">\n          <h2 htmlFor=\"myBox\" className=\"form-label col-6\">\n            {props.heading}\n          </h2>\n          <input\n            className={`form-control me-2 col bg-${props.mode} text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n            type=\"search\"\n            placeholder={props.search}\n            aria-label=\"Search\"\n          />\n          <button className=\"btn btn-outline-success col\" type=\"submit\">\n            Word Search\n          </button>\n          <textarea\n            className={`form-control my-4 bg-${props.mode} text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n            id=\"myBox\"\n            rows={15}\n            value={text}\n            onChange={handleOnChange}\n          />\n        </div>\n        <button className=\"btn btn-success mx-1 my-2\" onClick={speakClick}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={16}\n            height={16}\n            fill=\"currentColor\"\n            className=\"bi bi-megaphone-fill\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M13 2.5a1.5 1.5 0 0 1 3 0v11a1.5 1.5 0 0 1-3 0zm-1 .724c-2.067.95-4.539 1.481-7 1.656v6.237a25 25 0 0 1 1.088.085c2.053.204 4.038.668 5.912 1.56zm-8 7.841V4.934c-.68.027-1.399.043-2.008.053A2.02 2.02 0 0 0 0 7v2c0 1.106.896 1.996 1.994 2.009l.496.008a64 64 0 0 1 1.51.048m1.39 1.081q.428.032.85.078l.253 1.69a1 1 0 0 1-.983 1.187h-.548a1 1 0 0 1-.916-.599l-1.314-2.48a66 66 0 0 1 1.692.064q.491.026.966.06\" />\n          </svg>\n          &nbsp;&nbsp;Speak\n        </button>\n        <button className=\"btn btn-primary mx-1 my-2\" onClick={upperClassClick}>\n          Convert to Uppercase\n        </button>\n        <button className=\"btn btn-warning mx-1 my-2\" onClick={lowerClassClick}>\n          Convert to Lowercase\n        </button>\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={inverseClick}>\n          Inverse the Text\n        </button>\n        <button\n          className=\"btn btn-secondary mx-1 my-2\"\n          onClick={removeExtraSpacesClick}\n        >\n          Remove Extra Spaces\n        </button>\n        <button\n          className=\"btn btn-light mx-1 my-2\"\n          onClick={copyToClipboardClick}\n        >\n          Copy the Text\n        </button>\n        <button className=\"btn btn-danger mx-1 my-2\" onClick={clearTextClick}>\n          Clear the text\n        </button>\n      </div>\n      <div className=\"container my-5\">\n        <h2>Your Text Summary</h2>\n        <p>\n        {text===\"\"? 0 : wordCount(text)} words and {text.length} characters\n        </p>\n        <p>{ text===\"\"? 0 * 0.008 : wordCount(text) * 0.008} Minutes read</p>\n        <h3>Preview</h3>\n        <p>{text.length > 0 ? text : \"Enter something to preview\"}</p>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [modeText, setModeText] = useState(\"Dark\");\n  const [alert, setAlert] = useState(null);\n  const showAlertMessage = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1200);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeText(\"Light\");\n      document.body.style.backgroundColor = \"#2a2c33\";\n      document.body.style.color = \"#e9eaee\";\n      showAlertMessage(\"Dark mode has been enabled\", \"success\");\n      document.title = \"Textify - Dark Mode\";\n\n      // setInterval(() => {\n      // document.title = \"Textify - VIRUS!!!!\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install VirusDecettor now!!!\";\n      //   }, 1500);\n    } else if (mode === \"dark\") {\n      setMode(\"light\");\n      setModeText(\"Dark\");\n      document.body.style.backgroundColor = \"#e9eaee\";\n      document.body.style.color = \"#2a2c33\";\n      showAlertMessage(\"Light mode has been enabled\", \"success\");\n      document.title = \"Textify - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <BrowserRouter>\n        <Navbar\n          title=\"Textify\"\n          mode={mode}\n          toggleMode={toggleMode}\n          modeText={modeText}\n        />\n        <Alert alert={alert} />\n        <div className=\"container\">\n         <Routes>\n            <Route\n              exact path=\"/\"\n              element={\n                <TextForm\n                  heading=\"Enter text to analyze\"\n                  mode={mode}\n                  showAlertMessage={showAlertMessage}\n                />\n              }\n            ></Route>\n            <Route exact path=\"/about\" element={<About mode={mode} />}></Route>\n          </Routes>\n        </div>\n      </BrowserRouter> */}\n      <Navbar\n        title=\"Textify\"\n        mode={mode}\n        toggleMode={toggleMode}\n        modeText={modeText}\n      />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm\n          heading=\"Enter text to analyze\"\n          mode={mode}\n          showAlertMessage={showAlertMessage}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}